{"version":3,"sources":["logo.svg","Utils/roomGenerator.js","Components/Rooms/Rooms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","roomGenerate","rows","places","res","i","j","ids","push","id","row","place","flag","Math","random","console","log","prevAnswerFromServer","data","1","name","space","Rooms","state","room","price","generateHall","line","_this","forEach","elem","ind","arr","mouseHandler","event","target","style","background","dir","mouseOutHandler","this","setState","_this2","react_default","a","createElement","className","map","key","index","title","concat","color","onMouseOver","onMouseOut","Component","App","Components_Rooms_Rooms","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLCsBzBC,eApBI,SAACC,EAAMC,GAKtB,IAJA,IAAIC,EAAM,GACNC,EAAI,EACJC,EAAI,EACJC,EAAM,EACJF,GAAKH,GAAK,CACZ,KAAMI,GAAKH,GACPC,EAAII,KAAK,CACLC,GAAIF,IACJG,IAAKL,EACLM,MAAOL,IACPM,KAAMC,KAAKC,SAAW,KAG9BR,EAAI,EACJD,IAGJ,OADAU,QAAQC,IAAIZ,EAAI,UACTA,IChBPa,SAGI,KAIJC,EAAO,CACTC,EAAG,CACDC,KAAM,QACNC,MAAOpB,EAAa,EAAE,MAgEXqB,6MA3DbC,MAAQ,CACNC,KAAM,KACNC,MAAO,KAETC,aAAe,WACb,IAAItB,EAAM,GACNuB,EAAO,GAcX,OAbAC,EAAKL,MAAMC,KAAKH,MAAMQ,QAAQ,SAACC,EAAMC,EAAKC,GACxCjB,QAAQC,IAAIc,EAAKpB,OAASsB,EAAID,EAAI,GAAKC,EAAID,EAAI,GAAGrB,IAAM,MAAO,QAC1DoB,EAAKpB,OAASsB,EAAID,EAAI,GAAKC,EAAID,EAAI,GAAGrB,IAAM,OAC/CiB,EAAKnB,KAAKsB,GACVf,QAAQC,IAAIW,EAAK,UAGjBA,EAAKnB,KAAKsB,GACV1B,EAAII,KAAKmB,GACTA,EAAO,MAGXZ,QAAQC,IAAIZ,EAAI,OACTA,KAET6B,aAAe,SAAArB,GAAI,OAAI,SAAAsB,GACftB,IAAOsB,EAAMC,OAAOC,MAAMC,WAAa,UAC7CtB,QAAQuB,IAAI1B,OAEd2B,gBAAkB,SAAA3B,GAAI,OAAI,SAAAsB,GAClBtB,IAAOsB,EAAMC,OAAOC,MAAMC,WAAa,6FAG7CG,KAAKC,SAAS,CAAEjB,KAAMN,EAAK,GAAIO,MAAOR,qCAGhC,IAAAyB,EAAAF,KACN,OAAMA,KAAKjB,MAAMC,KAEfmB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,eAAeN,KAAKjB,MAAMC,KAAKJ,MAC/CuB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACdN,KAAKd,eAAeqB,IAAI,SAACpB,EAAMI,GAAP,OACvBY,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBAAmBE,IAAOjB,GACvCJ,EAAKoB,IAAI,SAACjB,EAAKmB,GAAN,OACRN,EAAAC,EAAAC,cAAA,OAAKC,UAAY,yBACZE,IAAOC,EAAQlB,EACfmB,MAAK,uBAAAC,OAAYrB,EAAKpB,IAAjB,sCAAAyC,OAAgCrB,EAAKnB,MAArC,gCAAAwC,OAAqDT,EAAKnB,MAAME,OACrEW,MAAS,CAACC,WAAYP,EAAKlB,KAAO,OAAS,OAClCwC,MAAOtB,EAAKlB,KAAO,OAAS,QACrCyC,YAAeX,EAAKT,aAAaH,EAAKlB,MACtC0C,WAAcZ,EAAKH,gBAAgBT,EAAKlB,OACvCkB,EAAKnB,cAfSgC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QAAjB,qBAnChBS,aCHLC,mLARX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACY,EAAD,cAJUF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c4415abb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nlet roomGenerate = (rows, places) => {\r\n    let res = []\r\n    let i = 1\r\n    let j = 1\r\n    let ids = 1\r\n    while(i <= rows){\r\n        while(j <= places ){\r\n            res.push({\r\n                id: ids++,\r\n                row: i,\r\n                place: j++,\r\n                flag: Math.random() < 0.2\r\n            })\r\n        }\r\n        j = 1\r\n        i++\r\n    }\r\n    console.log(res,\"genres\");\r\n    return res\r\n}\r\nexport default roomGenerate\r\n","import React, { Component } from 'react';\r\nimport roomGenerate from '../../Utils/roomGenerator.js'\r\nimport './index.css'\r\n\r\nlet prevAnswerFromServer = {\r\n  data: '15.03.19',\r\n  time: '19:00',\r\n\tprice: 100,\r\n\troom : 1,\r\n\tfilm : 777,\r\n\t\t\t}\r\nlet data = {\r\n  1: {\r\n    name: 'green',\r\n    space: roomGenerate(7,14)\r\n  }\r\n}\r\n\r\nclass Rooms extends Component {\r\n  state = {\r\n    room: null,\r\n    price: 0,\r\n  }\r\n  generateHall = () => {\r\n    let res = []\r\n    let line = []\r\n    this.state.room.space.forEach((elem, ind, arr) =>{\r\n      console.log(elem.row === (arr[ind+1] ? arr[ind+1].row : null) ,\"elem\")\r\n      if ( elem.row === (arr[ind+1] ? arr[ind+1].row : null) ) {\r\n        line.push(elem)\r\n        console.log(line,'line')\r\n      }\r\n      else {\r\n        line.push(elem)\r\n        res.push(line)\r\n        line = []\r\n      }\r\n    })\r\n    console.log(res,\"res\")\r\n    return res\r\n  }\r\n  mouseHandler = flag => event => {\r\n    if ( !flag ) event.target.style.background = 'orange'\r\n    console.dir(flag);\r\n  }\r\n  mouseOutHandler = flag => event => {\r\n    if ( !flag ) event.target.style.background = 'blue'\r\n  }\r\n  componentDidMount(){\r\n    this.setState({ room: data[1], price: prevAnswerFromServer.price })\r\n  }\r\n\r\n  render(){\r\n    if ( !this.state.room )return ( <div className = 'room'>Loading...</div> )\r\n    return (\r\n      <div className = 'room'>\r\n        <h1 className = 'room__title'>{this.state.room.name}</h1>\r\n        <div className = 'room__hall'>\r\n          {this.generateHall().map((line, ind) =>(\r\n            <div className ='room__hall__line' key = {ind}>\r\n              {line.map((elem,index) =>(\r\n                <div className = 'room__hall__line__cell'\r\n                     key = {index + ind}\r\n                     title = {`ряд: ${elem.row}; место: ${elem.place}; цена: ${this.state.price}`}\r\n                     style = {{background: elem.flag ? 'gray' : 'blue',\r\n                              color: elem.flag ? 'gray' : 'blue'}}\r\n                     onMouseOver = {this.mouseHandler(elem.flag)}\r\n                     onMouseOut = {this.mouseOutHandler(elem.flag)}>\r\n                     {elem.place}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Rooms\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Rooms from './Components/Rooms/Rooms.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Rooms />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}